// 한 줄 주석: 코드에 영향 안준 다.
// ㄴ 일반적으로 내가 or 타인을 위한 메모로 ㅅㅇ각하면 좋다.
//
// 주석
// 주석
// 주석

/*
단위 주석

모션 아카데미.

*/

// 컴퓨터는 효율을 추구한다. ->그렇기 때문에 프로그래밍 언어로 명령을 내리는 사람도 효율을 추구해야 한다.

// Basic
// font 중요
// consolas
// 1iIlL0Oo

/**
메인 함수(EP: entry point: 진입점)
ㄴ 메인 함수는 하나만 존재한다. (일반적으로 + 대부분 +99%)

c/c++ 언어는 프로그래미이 처음 실행되기 위해서 반드시 main() 함수를 포함하고 있어야 한다.
즉, main() 함수는 프로그램이 가장 먼저 시작되는 부분이기 때문에 해당 함수가 존재하지 않을 경우 프로그램 자체가 실행되지 않는다.

▶ c/c++ 언어가 프로그램으로 변환되기 위해서 거치는 큰 단계

- 전처리기
- 컴파일
- 링킹

*/

#pragma region 프로그래밍 언어
/**
▶ 프로그래밍이란?
- Programming -> Program 에 Ing 가 붙었으니 지금 프로그램을 하고 있다고 직역 가능
L 지금 프로그램을 하고 있다라는 말을 결국 프로그램을 만드는 것 -> 개발을 의미한다고 볼 수 있다.

▶ 프로그래밍 언어란?
- 컴퓨터와 대화 또는 명령을 할 수 있는 일련으리 명령문을 작성ㄹ할 수 있는 언어를 의미한다.
ㄴ 즉, 프로그래밍 언어를 이용하면 프로그램을 만드는 것이 가능

- 프로그램 언어는 다양한 언어가 존재하지만 크개 2가지로 분류 할 수 있다.
ㄴ 1. 특정 기능 구현에 최적화된 언어
ㄴ 2. 범용적 언어

▶ 프로그래밍 언어를 컴퓨터에서 이해하는 방법

- c/c++ 언어로 작성되어 있는 코드는 컴퓨터가 이해할 수 없는 명령문이다.
ㄴ 그렇기 때문에 c/c++ 언어는 중간에서 언어를 해석해 주는 번역가 역할을 하는 무언가가 필요하다.

※그게 바로 컴파일러
ㄴ 컴파일러는 해당 코드를 컴퓨터가 이해 할 수 있는 언어로 볂환하는 역할을 수행
ㄴ 컴파일러가 프로그래밍 언어와 컴퓨터가 사이에서 통역사 역할을 해주기 때문에 프로그래밍 언어(이진)을 모르다 하더라도 컴퓨터에게 명령을
내리는 것이 가능하다.

★ 컴파일러 != 인터프리터

▶ 프로그래밍 기술 및 기법
- 프로그래밍 기술은 점차 발전해 왔으며 앞으로도 발전해 나갈 것이다.
ㄴ 현재는 크게 4가지 + @ 로 파악 해두면 좋다.

1. 순차적 (절차지향)
ㄴ 가장 초기부터 사용된 기법 (코드의 흐름에 따라 프로그래밍 하는 기술)
ㄴ 프로그램의 실행부터 종료까지 흐름을 그대로 프로그래밍 하는 기법
ㄴ 이 방식은 프로그램의 흐름을 따라가기 때문에 구조적이지 못한 경우가 많고 코드가 여기저기
흩어져 있기 때문에 유지 보수에 불리하다. (어렵다.)

2. 구조적
ㄴ 절차 지향 프로그래밍의 단점을 보완하기 위해 나온 방식으로 봐도 무방
ㄴ 코드의 구조를 기능 단위로 묶는 방식
ㄴ 대개 함수 지향 프로그래밍이라고 부르며 절차지향 보다는 유지보수가 유리하다
※ 이러한 기능들을 한데 묶어 모듈이라는 형태로 만들게 되고 이는 프로그래밍 라이브러리로 발전한다.

3. 객체지향
ㄴ 위의 방식과는 다르게 코드의 기준을 "객체' 단위로 묶어 프로그램밍 하는 방식
ㄴ 모든 대상에서는 속성과 메서드가 있고 이를 하나로 묶어 인스턴스를 만든다.
ㄴ 여기에는 눈에 보이지 않는 개념도 포함이 되어 있는 경우가 많다.
ㄴ 객체 지향 기법에는 5대 특징 / 5대 설계 원칙 등이 있지만 지금은 몰라도 된다.

4. 컴포넌트
ㄴ 그나마 최근에 등장한 개념 -> 코딩의 기준을 객체가 아닌 컴포넌트 단위로 프로그래밍 한다
ㄴ 상용엔진에서 사용

@. AI

▶▶▶▶▶▶
*/

#pragma endregion 신난다

#pragma region 챔피언
#pragma endregion 챔피언

#pragma region 챔피언2
#pragma endregion 챔피언2


#pragma region 과제

// 헤더 파일 (c++ 코어 헤더)
#include <iostream>
/**
iostream: 입/출력을 담당하는 c++ 표준 라이브러리
ㄴ 표준 라이브러리는 <헤더파일> 형태를 띄는 경우가 대부분이다
ㄴ iostream 에 선언되어 있는 cout, cin, endl

*/
#pragma endregion 과제


#include <Windows.h>
// 일반적으로 .h 가 붙은 헤더는 구 버전 헤더 -> c 언어 -> 호환성

//#include "MainGame.h"
//// 사용자 정의 헤더 파일
//
//// 절대
//#include "Debug/Console_lesson.tlog/"
//
//// 상대
//#include "../../../"

// using 지시자: 지정한 네임 스페이스의 모든 명칭을 이 선언이 있는 영역으로 가져와 소속 상관 없이 명칭을 바로 사용하겠다는 뜻

#pragma region USINGSTD
using namespace std;
using std::cin;
using std::cout;
using std::endl;
#pragma endregion USINGSTD

void TextColor(int font, int background);

void main()
{
	/**
	▶ 코드 작성의 기본
	오류
	ㄴ 1. 구조적
	ㄴ 2. 문법
	ㄴ 3. 논리

	- 빨간색 밑줄을 본다면
	ㄴ a. 오타 체크
	ㄴ b. 앞, 뒤를 체크할 것
	ㄴ c. ; 이 빠졌는지 확인
	ㄴ d. 논리적으로 성립 여부 판단

	※ ; 이 친구는 코딩의 마침표
	ㄴ 대부분의 경우 반드시 사용해야 한다.
	*/

	cout << endl;

	//std::
	// cout: 출력해라
	// endl:  줄 바꿈 (개행)
	// << : 출력 연산자: cout ( c 언어: printf())
	// >> : 입력 연산자: cin ( c 언어: scanf())

	cout << "문자열 출력: " << "쌍타옴표 안에 " << endl;
	cout << "숫자 출력: " << 12345 << "그냥 적어도 되기는 한다. " << endl;

	cout << "지옥에 온 것을 환영한다" << endl;
	printf("지옥에 온 것을 환영한다.\n");

	/**
	▶ 서식 문자 (printf() + scanf())
	- 서식 문자는 문자열을 출력 또는 입력을 방을 때 해당 서식 문자의 자리를 다른 수로 대체하기 위한 자리 매김 역할을 하는 문자를 의미한다.
	- 서식 문자를 이용하면 고정되어 있지 않는 문자열을 출력 / 입력 받는 것이 가능하다.

	*/

	TextColor(4, 15);
	cout << " ===========================" << endl;

	TextColor(15, 0);
}

// () {} []
void TextColor(int font, int backGround)
{
	int color = font + backGround * 16;
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), color);
}

/**
 
 ▩ 1일차 과제 제출
 ㄴ 01. 단톡방에 이미지 3장 (모음)
 ㄴ 02. 단톡방에 01번을 올릴 때 이미지 2장 압축한 파일 올릴 럯

 * 양식
 이미지 ㅣ이름: 1,2,3, (노컬러, 컬러, 한컴 순서대로)
 ㄴ 이름: 언리얼 1기_콘솔 과제_이름.zip

 */


/**

▷ 서식 문자의 종류
- %d	(int 형 정수를 대체하는 용도)			1
- %ld	(long 형 정수를 대체하는 용도)			-
- %lld	(long long 형 정수를 대체하는 용도)		-
- %c	(char 형 문자를 대체하는 용도)			4
- %s	(문자열 입력)							3
- %f	(float 형 실수를 대체하는 용도)			2
- %lf	(doule 형 실수를 대체하는 용도)			-

▷ printf 특수 문자
- \n: 개행
- \t: 수평탭
- \v: 수직탭
- \\: \
- \?: ?
- \': '
- \": ?

▷ 진수
- 진법으로 나나낸 수를 의미
ㄴ n진법 -> 0부터 n개의 숫자를 사용하여 수를 표현 0~(n-1)까지 표현

 */