#pragma once
#include <iostream>
#include <time.h>
#include <Windows.h>
using namespace std;

/**
▷ 포인터란?
어떤 값을 저장하는 것이 아닌 어떠한 값의 주소를 저장하는 것
메모리의 주소를 의미하며, c/c++ 언어는 포인터를 통해서 테이터에 간접적으로 접근하는 것이 가능하다
포인터를 활용하면 서로 다른 영역에 있는 변수라 하더라도 값을 변경하는  것이 가능

-심플하게 기억할 것
1. 포인터: 가르키는 놈, 주소를 담는 그릇
2. 어떤한 값의 주소: 해당 값이 저장된 컴퓨터 메모리상의 주소
3. *: 해당 메모리에 있는 데이터를 값을 가져오는 기능
3 &: 주소 값을 반환하는 연산자.
5 ->: 객체의 멤버에 접근할 때 사용한다.

▷ 포인터에 자료형이 필요한 이유
포인터는 단순히 메모리의 주소에 불가하다
그렇기 때문에 해당 정보만을 가지고는 메모리의 얼만큼의 크리고 값을 저장하거나 읽어 들일지 판단하느 것이 불가능

그렇기 때문에 포인터의 자료형을 통해서 저장 및 읽어들일 메모리의 크기를 명시해 줘야 한다
고로 포인터와 해당 포인터에 저장할 변수의 자료형을 일치해야 한다

다만 메모리의 주소만을 보관하고 싶다면 특정 자료형을 명시하는 것이 아니라 void* 형으로 선언하는 것도 가능하다
이를 void 포인터라고 부르며 void 포인터는 어떠한 자료형의 메모리 주소도 보관하는 것이 가능


▷ 메모리 구성 영역
1. 코드 영역
2. 데이터 영역: global, static
3. 스택 영역
지역변수/매개 변수가 할당 -> 선언된 함수를 빠져 나오면 소멸
시스템에 의해서 관리되는 영역
스택에는 베이스 포인트를 가진 위치가 있다

4. 힙 영역
프로그래머에 의해서 관리되는 영역
데이터 영역과 스택 영역에 할당되는 변수들은 생성 및 소멸이 정해저 있다
프로그래머가 원하는 시점에 변수를 할당하고 소멸할 수 있는 영역이 바로 힙
특징으로는 프로그래머가 직접 할당하기 때문에 직접 소멸해야 한다.
소멸되지 않는 메모리는 계속 상주하기 때문에 메모리 관리 차원에서 매우 좋지 않다

▷ 메모리 동적 할당 방법
malloc
new

해제는 각각 free/delete

동적 할당 주의사항
1. 메모리 릭
2. 댕글링
유효하지 않은 메모리
이미 제거된 메모리를 가르키고 



과제1. 복습 과제
두 정수 사이의 합을 구하는 프로그램을 만든다
두 개의 숫자를 사용자를 통해 입력 받는다

입력한 두 숫자 사이의 합을 출력하면 OK
예외 처리: 5번과 1번을 눌렀다. X -> 재입력

숫자의 합이 100이사이면 프로그램 종료를 출력하고 마감



▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷▷
느낌 있는 골뱅이가 우물에 5프로 ^당근을 친구와*월에 크리스마스
 */
namespace Lesson09
{
	inline void addHP(int hp, int value)
	{
		hp += value;
	}

	inline void Example()
	{
		int* countA = new int[3];
		int* countB = new int;

	}

	inline void Example1()
	{
		int hp = 100;
		addHP(hp, 20);

		cout << "체력: " << hp << endl;


		char str1[] = "str1 string";
		const char* str2 = "str2 string";
		cout << "str1: " << str1 << endl;
		cout << "str2: " << str2 << endl;


		//register int cc1;
		//int register cc2;
	}
}